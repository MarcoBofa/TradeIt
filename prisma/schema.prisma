// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  surname   String?
  email     String   @unique
  image     String?  
  role      String   @default("user")
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt
  hashedPassword String? //optional for allowing social login
  emailVerified DateTime?
  accounts Account[]
  watchlists Watchlist[]
  competitionIds String[]
  points Int @default(0)
  stockSelections  StockSelection[] // One-to-many relation to StockSelection
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model Watchlist {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @unique @db.ObjectId
  stockSymbols String[]
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

}

model Competition {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  startDate        DateTime
  endDate          DateTime
  status           Boolean           @default(false)
  stockSelections  StockSelection[] // One-to-many relation to StockSelection
  // The list of participants is derived from the stockSelections relation

}

model StockSelection {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  competitionId  String        @db.ObjectId
  userId         String        @db.ObjectId
  avgChange       Float         @default(0.0)
  rank            Int           @default(0)
  selections     UserStock[]   // An array of UserStock to hold the selected stocks and their prices
  competition    Competition   @relation(fields: [competitionId], references: [id])
  user           User          @relation(fields: [userId], references: [id])
}

model UserStock {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  tickerSymbol     String    
  initialPrice     Float
  finalPrice       Float?    // This can be null and set at the end of the competition
  stockSelection   StockSelection @relation(fields: [stockSelectionId], references: [id])
  stockSelectionId String    @db.ObjectId
}





